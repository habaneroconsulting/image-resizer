{"version":3,"sources":["ImageResizer/components/ImageCrop.tsx"],"names":["ImageCrop","crop","props","useState","intermediateCrop","setIntermediateCrop","useEffect","onChange","newCrop"],"mappings":"mOAQaA,G,OAAY,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,KAASC,EAA4B,0BAGhBC,mBAAeF,GAHC,mBAGzDG,EAHyD,KAGvCC,EAHuC,KAUhE,OAJAC,qBAAU,WACTD,EAAoBJ,KAClB,CAACA,IAEG,cAAC,IAAD,aAAgBA,KAAMG,EAAkBG,SAAU,SAACC,GAAD,OAAaH,EAAoBG,KAAcN,MAG1FF","file":"static/js/ImageCrop.2d31058e.chunk.js","sourcesContent":["import ReactImageCrop, { Crop, ReactCropProps } from 'react-image-crop';\r\nimport { useEffect, useState } from 'react';\r\n\r\n// Created a separate component to help dynamically load CSS.\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\ntype ImageCropProps = Omit<ReactCropProps, 'onChange'>;\r\n\r\nexport const ImageCrop = ({ crop, ...props }: ImageCropProps) => {\r\n\t// Use an intermediate state variable for cropping so that our application doesn't\r\n\t// have to re-render on individual changes. This keeps the crop marquee tool fast.\r\n\tconst [intermediateCrop, setIntermediateCrop] = useState<Crop>(crop);\r\n\r\n\t// When the crop prop changes, reset our intermediate state to the new state.\r\n\tuseEffect(() => {\r\n\t\tsetIntermediateCrop(crop);\r\n\t}, [crop]);\r\n\r\n\treturn <ReactImageCrop crop={intermediateCrop} onChange={(newCrop) => setIntermediateCrop(newCrop)} {...props} />;\r\n};\r\n\r\nexport default ImageCrop;\r\n"],"sourceRoot":""}