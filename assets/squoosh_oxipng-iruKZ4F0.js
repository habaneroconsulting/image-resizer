let i;const b=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&b.decode();let s=null;function c(){return(s===null||s.byteLength===0)&&(s=new Uint8Array(i.memory.buffer)),s}function h(e,n){return e=e>>>0,b.decode(c().subarray(e,e+n))}let y=0;function p(e,n){const t=n(e.length*1,1)>>>0;return c().set(e,t/1),y=e.length,t}let a=null;function u(){return(a===null||a.byteLength===0)&&(a=new Int32Array(i.memory.buffer)),a}function A(e,n){return e=e>>>0,c().subarray(e/1,e/1+n)}function T(e,n,t,r){try{const o=i.__wbindgen_add_to_stack_pointer(-16),m=p(e,i.__wbindgen_malloc),g=y;i.optimise(o,m,g,n,t,r);var f=u()[o/4+0],l=u()[o/4+1],d=A(f,l).slice();return i.__wbindgen_free(f,l*1),d}finally{i.__wbindgen_add_to_stack_pointer(16)}}async function W(e,n){if(typeof Response=="function"&&e instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(e,n)}catch(r){if(e.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",r);else throw r}const t=await e.arrayBuffer();return await WebAssembly.instantiate(t,n)}else{const t=await WebAssembly.instantiate(e,n);return t instanceof WebAssembly.Instance?{instance:t,module:e}:t}}function _(){const e={};return e.wbg={},e.wbg.__wbindgen_throw=function(n,t){throw new Error(h(n,t))},e}function w(e,n){return i=e.exports,M.__wbindgen_wasm_module=n,a=null,s=null,i}function x(e){if(i!==void 0)return i;const n=_();e instanceof WebAssembly.Module||(e=new WebAssembly.Module(e));const t=new WebAssembly.Instance(e,n);return w(t,e)}async function M(e){if(i!==void 0)return i;typeof e>"u"&&(e=new URL("/image-resizer/assets/squoosh_oxipng_bg-6KnzfTiM.wasm",import.meta.url));const n=_();(typeof e=="string"||typeof Request=="function"&&e instanceof Request||typeof URL=="function"&&e instanceof URL)&&(e=fetch(e));const{instance:t,module:r}=await W(await e,n);return w(t,r)}export{M as default,x as initSync,T as optimise};
